name: Multiple Sessions & URL POST Request

# 触发条件：定时触发 + 手动触发
on:
  schedule:
    - cron: '*/5 * * * *'  # 每5分钟执行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  send-multiple-posts:
    runs-on: ubuntu-latest
    
    steps:
      - name: Send POST requests for multiple sessions
        uses: actions/github-script@v6
        with:
          script: |
            // 目标URL
            const url = "https://api.planet.shenxu.net.cn/planet/api/client/reward/done";
            
            // 从环境变量获取多个session3rd，使用逗号分隔
            const sessions = process.env.SESSION_3RDS?.split(',').map(s => s.trim()).filter(Boolean);
            
            // 检查是否有有效的会话
            if (!sessions || sessions.length === 0) {
              console.error("错误：未设置有效的SESSION_3RDS环境变量，请检查secrets配置");
              throw new Error("No valid SESSION_3RDS configured");
            }
            
            console.log(`发现 ${sessions.length} 个会话，将为每个会话发送请求...`);
            
            // 请求头配置
            const headers = {
              "Host": "api.planet.shenxu.net.cn",
              "Content-Type": "application/x-www-form-urlencoded",
              "Accept-Encoding": "gzip, deflate, br",
              "Connection": "keep-alive",
              "Accept": "*/*",
              "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_8_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Html5Plus/1.0 (Immersed/20) uni-app",
              "sign": "9117d8eaf7b0686562d6504d1b73a05c",
              "Accept-Language": "zh-CN,zh-Hans;q=0.9"
            };
            
            // 用于跟踪是否所有请求都成功
            let allSuccess = true;
            
            // 为每个会话发送请求
            for (let i = 0; i < sessions.length; i++) {
              const session = sessions[i];
              const sessionIndex = i + 1;
              
              console.log(`\n处理第 ${sessionIndex}/${sessions.length} 个会话...`);
              
              try {
                // 构建请求数据，对session进行URL编码处理特殊字符
                const data = `scene=0&version=1.2.3&session3rd=${encodeURIComponent(session)}&adUnitId=adunit-d744d39589885989&type=100`;
                
                // 发送POST请求
                const response = await fetch(url, {
                  method: 'POST',
                  headers: headers,
                  body: data
                });
                
                // 检查HTTP状态码
                if (!response.ok) {
                  throw new Error(`请求失败，状态码: ${response.status}`);
                }
                
                // 解析响应内容
                const responseData = await response.json();
                
                console.log(`会话 ${sessionIndex} 请求成功，状态码: ${response.status}`);
                if (responseData.message !== undefined) {
                  console.log(`响应消息: ${responseData.message}`);
                } else {
                  console.log("响应中未包含message字段");
                }
                console.log(`完整响应内容: ${JSON.stringify(responseData, null, 2)}`);
                
              } catch (error) {
                allSuccess = false;
                console.error(`会话 ${sessionIndex} 请求失败: ${error.message}`);
              }
            }
            
            // 如果有任何请求失败，标记工作流为失败
            if (!allSuccess) {
              throw new Error(`部分或全部会话请求失败，请查看日志`);
            }
        env:
          # 多个session3rd值，使用逗号分隔
          SESSION_3RDS: ${{ secrets.SESSION_3RDS }}
